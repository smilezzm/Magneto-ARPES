%% Magnetic field simulation
% this function calculates the magnetic field generated by a coil
% assuming the material here is non magnetic (\mu_r=1)
function [R, coilGm, airGm] = calc_field(currentDensity, geometry, options)
    if ~isfield(geometry, 'coilRin'), geometry.coilRin = 0.004; end
    if ~isfield(geometry, 'coilRout'), geometry.coilRout = 0.0041; end
    if ~isfield(geometry, 'coilHeight'), geometry.coilHeight = 0.004; end
    if ~isfield(geometry, 'airR'), geometry.airR = 0.05; end
    if ~isfield(geometry, 'airHeight'), geometry.airHeight = 0.05; end
    if ~isfield(options, 'plot'), options.plot = false; end
    if ~isfield(options, 'rotation'), options.rotation = struct(); end
    if ~isfield(options.rotation, 'theta'), options.rotation.theta = 0; end
    if ~isfield(options.rotation, 'beta'), options.rotation.beta = 0; end
    if ~isfield(options.rotation, 'phi'), options.rotation.phi = 0; end
    if ~isfield(options, 'translation'), options.translation = struct(); end
    if ~isfield(options.translation, 'x'), options.translation.x = 0; end
    if ~isfield(options.translation, 'y'), options.translation.y = 0; end
    if ~isfield(options.translation, 'z'), options.translation.z = 0; end
    
    coilRin = geometry.coilRin;
    coilRout = geometry.coilRout;
    coilHeight = geometry.coilHeight;
    airR = geometry.airR;
    airHeight = geometry.airHeight;   
    coilGm = multicylinder([coilRin, coilRout], coilHeight, Void=[1 0]);
    airGm = multicylinder(airR, airHeight);
    coilGm = rotate(coilGm, options.rotation.theta, [0, 0, coilHeight], [1e-3, 0, coilHeight]);
    coilGm = rotate(coilGm, options.rotation.beta, [0,0,coilHeight], [0,1e-3,coilHeight]);
    coilGm = rotate(coilGm, options.rotation.phi, [0,0,coilHeight], [0,0,coilHeight+1e-3]);
    coilGm = translate(coilGm, [options.translation.x, options.translation.y, airHeight/2 - coilHeight/2 + options.translation.z]);

    if options.plot
        gm = addCell(airGm, coilGm);
        figure
        pdegplot(gm,FaceAlpha=0.2,CellLabels="on")
        hold on
        axis([-coilRout*2 coilRout*2 -coilRout*2 coilRout*2 airHeight/2-coilHeight airHeight/2+coilHeight])
    end

    model = femodel(AnalysisType="magnetostatic", Geometry=gm);
    model.VacuumPermeability = 1.2566370614E-6;
    model.MaterialProperties = materialProperties(RelativePermeability=1);
    model.CellLoad(2) = cellLoad(CurrentDensity=@windingCurrent3D);
    
    % % check the name of faces
    % figure
    % pdegplot(model.Geometry,FaceAlpha=0.5, FaceLabels="on")
    % % check finish
    
    model.FaceBC(1:3) = faceBC(MagneticPotential=[0;0;0]);  % boundary condition on Face1, Face2, Face3
    internalFaces = cellFaces(model.Geometry, 2);   % extract all the faces of the coil
    model = generateMesh(model, Hface={internalFaces, 0.0002});  % use a fine mesh for the coil
    
    R = solve(model);

    if options.plot
        % draw the field
        x = linspace(-3*coilRout, coilRout*3, 20);
        z = linspace(airHeight/2-2*coilHeight, airHeight/2+2*coilHeight, 20);
        y = x;
        [X,Y,Z] = meshgrid(x,y,z);
        intrpB = R.interpolateMagneticFlux(X,Y,Z); 
        Bx = reshape(intrpB.Bx,size(X));
        By = reshape(intrpB.By,size(Y));
        Bz = reshape(intrpB.Bz,size(Z));
        figure
        quiver3(X,Y,Z,Bx,By,Bz,Color="r")
        hold on
        pdegplot(coilGm,FaceAlpha=0.2);
    end
    
    function f3D = windingCurrent3D(region,~)
    [TH,~,~] = cart2pol(region.x,region.y,region.z);
    f3D = -currentDensity*[sin(TH); -cos(TH); zeros(size(TH))];
    end
end